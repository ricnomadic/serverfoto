# -*- coding: utf-8 -*-
import base64
import datetime
import io

from dash import Dash, dcc, html , dash_table
from dash.dependencies import Input, Output, State
import os

import pandas as pd


external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"]

app = Dash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div(
    [
        html.H1(children='PackingList'),
        html.Div(children='''
        La dashboard per le tue packing list. Inserisci i dati richiesti ed esporta la tua lista
        '''),
        html.H3("Valorizza i campi che ti verrano richiesti o importa il file!"),
        
        dcc.Upload(
        id='upload-data',
        children=html.Div([
            'Drag and Drop or ',
            html.A('Select Files')
        ]),
        style={
            'width': '100%',
            'height': '60px',
            'lineHeight': '60px',
            'borderWidth': '1px',
            'borderStyle': 'dashed',
            'borderRadius': '5px',
            'textAlign': 'center',
            'margin': '10px'
        },
        # Allow multiple files to be uploaded
        multiple=True
    ),
        "Componente: ",
        dcc.Input(id="input1", type="text", placeholder="Inserisci numero MPN", style={'marginRight':'10px'}),
        "LotId: ",
        dcc.Input(id="input2", type="text", placeholder="Inserisci il lotto", debounce=True),
        html.Button("Aggiungi alla lista", id="button-print"),
        html.Div(id="output"),
        html.Div(id='output-data-upload'),
        html.Br(),
    ]
)

def parse_contents(contents, filename, date):
    content_type, content_string = contents.split(',')

    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            # Assumiamo venga inserito file CSV
            df = pd.read_csv(
                io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            # Assumiamo venga inserito file XLS
            df = pd.read_excel(io.BytesIO(decoded))
    except Exception as e:
        print(e)
        return html.Div([
            'Non posso processare questo file'
        ])

    return html.Div([
        html.H5(''),
        dash_table.DataTable(
            df.to_dict('records'),
            [{'name': i, 'id': i} for i in df.columns]
        ),

        html.Hr(),  # horizontal line

        # For debugging, display the raw contents provided by the web browser
        html.Div('Raw Content'),
        html.Pre(contents[0:200] + '...', style={
            'whiteSpace': 'pre-wrap',
            'wordBreak': 'break-all'
        })
    ])

@app.callback(Output('output-data-upload', 'children'),
              Input('upload-data', 'contents'),
              State('upload-data', 'filename'),
              State('upload-data', 'last_modified'))
def update_output(list_of_contents, list_of_names, list_of_dates):
    if list_of_contents is not None:
        children = [
            parse_contents(c, n, d) for c, n, d in
            zip(list_of_contents, list_of_names, list_of_dates)]
        return children

if __name__ == "__main__":
    app.run_server(debug=True)
